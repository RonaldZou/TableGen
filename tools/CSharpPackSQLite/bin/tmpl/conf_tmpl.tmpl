using System;
using System.Collections.Generic;
using UnityEngine;
using System.Reflection;
using System.IO;

namespace GOEGame
{
	/// <summary>
	/// Generated from @(Model.ExcelName)
	/// </summary>
	public  class  Conf@(Model.TableName)
	{
		public static bool resLoaded = false;
		
		public static bool cacheLoaded = false;
		 
		private static List<Conf@(Model.TableName)>  cacheArray = new List<Conf@(Model.TableName)>();
		
		public static List<Conf@(Model.TableName)> array 
		{
			get
            {
                GetArrrayList();
                return cacheArray;
            }
		}
		
		public Conf@(Model.TableName)()
		{
		}

		public static void Init()
		{
			if (cacheLoaded)
			{
				GetArrrayList();
			}
            
		}
		@for (var i = 0; i < Model.SheetColumns; i++){
			@:public readonly @Model.AttributeTypes[@i] @Model.AttributeNames[@i];
			
		}

		public Conf@(Model.TableName)( @for (var i = 0; i < Model.SheetColumns -1; i++){@: 		@Model.AttributeTypes[@i] @Model.AttributeNames[@i],
		} 
 		@Model.AttributeTypes[@Model.SheetColumns -1] @Model.AttributeNames[@Model.SheetColumns -1]){
 			@for (var i = 0; i < Model.SheetColumns; i++){
			@: this.@Model.AttributeNames[@i] = @Model.AttributeNames[@i];
			
		}
		}
			
		private static Dictionary<@Model.AttributeTypes[0], Conf@(Model.TableName)> dic = new Dictionary<@Model.AttributeTypes[0], Conf@(Model.TableName)>();
		
		public static bool GetConfig( @Model.AttributeTypes[0] id, out Conf@(Model.TableName) config )
		{
			if (dic.TryGetValue(id, out config))
            {
                return true;
            }
            Dictionary<string, object> dic_interm_val = SQLiteHelper.Instance().SelectWhere("Conf@(Model.TableName)", id);
            if (dic_interm_val != null && dic_interm_val.Count > 0)
            {
                config = GetConfByDic(dic_interm_val);
                return true;
            }
            else
            {
                config = null;
                return false;
            }
		}

		public static Conf@(Model.TableName) Get(@(Model.AttributeTypes[0]) id)
        {
			Conf@(Model.TableName) config;
             bool _exist = GetConfig(id, out config);

             return config;
        }

         public static bool GetConfig( string fieldName, object fieldValue, out Conf@(Model.TableName) config )
        {
            Type type = typeof(Conf@(Model.TableName));
            FieldInfo fieldInfo = type.GetField(fieldName, BindingFlags.Public | BindingFlags.Instance);
			if (fieldInfo.FieldType != fieldValue.GetType())
                fieldValue = Convert.ChangeType(fieldValue, fieldInfo.FieldType);
            if (fieldInfo != null)
            {
                Dictionary<string, object> dic_interm_val = SQLiteHelper.Instance().SelectWhereCondition("Conf@(Model.TableName)", fieldName, fieldValue);
                if (dic_interm_val != null && dic_interm_val.Count > 0)
                {
                    config = GetConfByDic(dic_interm_val);
                    return true;
                }
            }
            config = null;
            return false;
        }

        public static void Clear()
        {
			cacheArray.Clear();
        }
		
		 private static Conf@(Model.TableName) GetConfByDic(Dictionary<string, object> dic_interm_val)
         {
		 
			@for (var i = 0; i < Model.SheetColumns; i++){
			
					if ( @Model.AttributeValues[@i] >= 11 )
					{
						@:	@Model.AttributeTypes[@i] @Model.AttributeNames[@i] = (@Model.AttributeTypes[@i])ConfigUtil.GetArrayData((string)dic_interm_val["@Model.AttributeNames[@i]"],@Model.AttributeValues[@i]);
					}
					else
					{
						@:	@Model.AttributeTypes[@i] @Model.AttributeNames[@i] = (@Model.AttributeTypes[@i])dic_interm_val["@Model.AttributeNames[@i]"];
					}


			}
		
				Conf@(Model.TableName)	new_obj_Conf@(Model.TableName) = new Conf@(Model.TableName)(@for (var i = 0; i < Model.SheetColumns -1; i++){@: 		 @Model.AttributeNames[@i],
			}
			@Model.AttributeNames[Model.SheetColumns -1]
			);
		
                 return new_obj_Conf@(Model.TableName);
         }
		 
		 private static void GetArrrayList()
        {
            if(cacheArray.Count <= 0)
            {
                List<Dictionary<string, object>> _list =  SQLiteHelper.Instance().ReadFullTable("Conf@(Model.TableName)");
				if(_list != null)
				{
					for (int i = 0; i < _list.Count; ++i )
					{
						Conf@(Model.TableName) _conf = GetConfByDic(_list[i]);
						cacheArray.Add(_conf);
						dic[_conf.@Model.AttributeNames[0]] = _conf;
					}
					resLoaded = true;
				}
            }
        }

	}
}